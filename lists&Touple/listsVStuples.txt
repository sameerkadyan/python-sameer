
Lists vs Tuples in Python

Side-by-Side Comparison:

| Feature                  | List ([])                              | Tuple (())                              |
|--------------------------|-----------------------------------------|------------------------------------------|
| Definition               | Ordered, mutable collection             | Ordered, immutable collection             |
| Syntax                   | my_list = [1, 2, 3]                     | my_tuple = (1, 2, 3)                      |
| Mutable?                 | Yes (can modify, add, delete items)     | No (cannot change after creation)        |
| Indexing                 | Yes                                     | Yes                                      |
| Slicing                  | Yes                                     | Yes                                      |
| Can contain duplicates?  | Yes                                     | Yes                                      |
| Can store mixed types?   | Yes                                     | Yes                                      |
| Length (len())           | Yes                                     | Yes                                      |
| Iteration                | Yes                                     | Yes                                      |
| Nesting                  | Yes (list of lists)                     | Yes (tuple of tuples)                    |
| Hashable?                | No                                      | Yes (if elements are hashable)          |
| Memory usage             | Higher                                  | Lower                                    |
| Speed                    | Slower (due to mutability)              | Faster (due to immutability)            |
| Built-in Methods         | Many (append, pop, extend, etc.)        | Few (count, index)                       |
| Changeable after creation| Yes                                     | No                                       |
| Use as dictionary key?   | No                                      | Yes                                      |
| Best for                 | Frequent modifications                  | Fixed/read-only collections             |

Code Comparison:

List Example:
    my_list = [1, 2, 3]
    my_list.append(4)
    print(my_list)  # [1, 2, 3, 4]

Tuple Example:
    my_tuple = (1, 2, 3)
    # my_tuple.append(4)  # AttributeError

Performance Comparison:

    import sys
    print(sys.getsizeof([1, 2, 3]))  # More memory
    print(sys.getsizeof((1, 2, 3)))  # Less memory

When to Use:

| Use Case                             | Recommended |
|--------------------------------------|-------------|
| You need to change data              | List        |
| You want data to be constant/fixed  | Tuple       |
| Need a hashable object (dict key)   | Tuple       |
| Performance/memory efficiency       | Tuple       |
| Many data operations/methods        | List        |

Tuple as Dictionary Key:

    coordinates = {}
    key = (10, 20)
    coordinates[key] = "Point A"
